<?php

namespace App\Bundle\MainBundle\Repository;

use App\Bundle\MainBundle\Services\JolydaysConstante;
use Doctrine\ORM\EntityRepository;

/**
 * AnnoncesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnoncesRepository extends EntityRepository
{
    /**
     * findByCriteriaQueryBuilder
     *
     * @param null $options
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findByCriteriaQueryBuilder($options = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a') ;

        $qb->andWhere('a.status = :status')
            ->setParameter('status', JolydaysConstante::ANNONCE_STATUS_ACTIF) ;

        if ( !empty($options) ) {
            if ( $options['search'] ) {
                $query = 'a.title LIKE :search OR a.description LIKE :search' ;
                $qb->andWhere($query)
                    ->setParameter('search', '%'.$options['search'].'%');

            }

            if ($options['query']) {
                $qb->innerJoin('a.categorie', 'categorie')
                ->andWhere('categorie.id = :categorie')
                    ->setParameter('categorie', $options['query']) ;
            }
        }

        return $qb ;
    }

    /**
     * getNbQueryBuilder
     *
     * @param null $options
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getNbQueryBuilder($options = null)
    {
        $qb = $this->findByCriteriaQueryBuilder($options);
        return $qb->select('COUNT(DISTINCT a.id) AS nbAnnonce');
    }

    /**
     * @param $qb
     * @param array $limit
     * @return mixed
     */
    public function addLimit($qb, $limit = array())
    {
        if (isset($limit['start'])) {
            $qb->setFirstResult($limit['start']);
        }
        if (isset($limit['length'])) {
            $qb->setMaxResults($limit['length']);
        }

        return $qb;
    }

    /**
     * @param $qb
     * @param array $sortings
     * @return mixed
     */
    public function addSortings($qb, $sortings = array())
    {
        if (count($sortings) == 0) {
            $qb->orderBy('a.id', 'ASC');
        } else {
            foreach ($sortings as $sortingCcolumn => $sortingDirection) {
                $qb->addOrderBy($sortingCcolumn, $sortingDirection);
            }
        }

        return $qb;
    }

}
